# -*- coding: utf-8 -*-
"""Copie de Covid_Dashboard_Deploy_lastV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZVpX0o47tA0ag9A_ANxb1Q4dL8ieG-aw
"""

# Import librairies
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns

import pickle
import matplotlib
import matplotlib.pyplot as plt

from matplotlib.colors import LinearSegmentedColormap
matplotlib.use('Agg')
st.set_option('deprecation.showPyplotGlobalUse', False)


# Load data
loaded_data = pickle.load(open('data_covid.dat', 'rb'))



#"""Create a dashboard"""


def main():
    st.markdown('# **Centralisation des échanges de flacons de vaccins**')
    #st.subheader('Projet proposé par:')
    

    @st.cache()  #hash_funcs={data.dict: my_hash_func}
    def load_data():
        data = loaded_data.copy()
        return data
    
    # Create a text element and let the reader know the data is loading.
    data_load_state = st.text('Les données chargent...')
    # Load the data into the dataframe.
    data = load_data()
    # Notify the reader that the data was successfully loaded.
    data_load_state.text('Les données sont chargées!')

    st.markdown('Création d\'un dataframe à partir des données originales')
    
    @st.cache()  #hash_funcs={data.dict: my_hash_func}
    def load_dataframe():
        Df = pd.DataFrame(data['data'], columns=data['feature_names'])
        #Df['score_de_priorite'] = data['score_de_priorite']
        return Df

    # Create a text element and let the reader know the dataframe has been created.
    #dataframe_load_state = st.text('Le dataframe est créé!')
    # Load the data into the dataframe.
    Df = load_dataframe()
    # Notify the reader that the data was successfully loaded.
    #dataframe_load_state.text('Les données sont chargées dans le dataframe!')

    # Make the centre_id the index ### centre_id
    #Df.set_index('centre_id', inplace=True)
    Df_regions = Df.copy()
    #Df_regions.drop(['centre_id'], axis=1, inplace=True)
    ##Df_regions.set_index('centre_id', inplace=True)

    Df_regions.semaine.unique()

    # Change fortmat 
    # Department
    Df_regions['code_departement'] = Df_regions['code_departement'].astype('int32')

    # Print the top 5 of the created Dataframe
    st.write('Ci-dessous sont affichées les 5 premières lignes du tableau de données pour une région'
              ' l\'index correspond aux départements')
    st.write(Df_regions.head(5))
    

    # BY CENTER (FROM A DEPARTMENT)

    Df_dep_total = Df_regions.copy()
    # Change format
    Df_dep_total['centre_id']= Df_dep_total['centre_id'].astype('int32')

    st.write('******************************************************')
    st.write('******************************************************')

##
    st.markdown('## Observations par département')
    DEP = Df_regions['code_departement']
    Df_regions.set_index('code_departement', inplace=True)
    Df_regions['code_departement'] = Df_regions.index

    # Create a multiselection bar
    ID_Dep = st.sidebar.multiselect('Entrer l\'identifiant du département, code_departement:', DEP.unique())

    #Df_regions.reset_index(inplace=True)
    #Df_dep = Df_regions[Df_regions.code_departement==ID_Dep]  #Df_regions.loc[ID_Dep]
    Df_dep = Df_regions.loc[ID_Dep]

    # Observe allocations evolution
    st.markdown('### *Observation de l\'évolution des allocations par semaine*')

    #Df_dep = Df_regions[Df_regions.code_departement==ID_Dep]


    #st.title('Nombres de flacons alloués par semaine')
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    semaines = Df_dep['semaine'] # à voir
    nombre_ucd = Df_dep['nb_ucd'] # dans df initial allocations
    ax.plot(semaines, nombre_ucd) 
    ax.set_xlabel('Semaines')
    ax.set_ylabel('Nombre d\'udc')
    #st.write(fig)
    st.pyplot(bbox_inches='tight')
    plt.clf()

    # Observe allocations evolution
    #st.title('Observation de l\'évolution des allocations par jour')


    st.write('******************************************************')

    # Observe stocks evolution
    st.markdown('### *Observation de l\'évolution des stocks par semaine*') 

    #st.title('Nombres de flacons en stock par semaine')
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    semaines = Df_dep['semaine'] # à voir
    # We need the stock number from the centres
    #nombre_ucd = Df_dep['nb_ucd'] # dans df initial stock
    ax.plot(semaines, nombre_ucd) 
    ax.set_xlabel('Semaines')
    ax.set_ylabel('Nombre d\'udc')
    #st.pyplot(bbox_inches='tight')
    #plt.clf()
    st.write('Nous avons besoin des données de stock des centres')

    # Observe stocks evolution
    #st.title('Observation de l\'évolution des stocks par jour')


    st.write('******************************************************')

    # Observe allocations evolution
    st.markdown('### *Observation de l\'évolution des allocations et des stocks par semaine*')
    ### FAIRE UN GRAPH qui regroupe les 2 du haut

    # Observe allocations evolution
    st.markdown('### *Observation de l\'évolution des allocations et des stocks par jour*')


    st.write('******************************************************')

    # Observe missed appointment ratio evolution
    st.markdown('### *Observation de l\'évolution du ratio de RDV manqués/RDV prévus par semaine*')
    #st.title('Nombres de flacons en stock par semaine')
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    semaines = Df_dep['semaine'] # à voir
    ratio = Df_dep['ratio_efficacite'] # dans df merge tot
    ax.plot(semaines, ratio) 
    ax.set_xlabel('Semaines')
    ax.set_ylabel('Ratio RDV manqués/prévus')
    #st.write(fig)
    st.pyplot(bbox_inches='tight')
    plt.clf()
    st.write('******************************************************')

    # Observe missed appointment ratio evolution
    st.markdown('### *Observation de l\'évolution du ratio de RDV manqués/RDV prévus par jour*')
    st.write('******************************************************')
    st.write('******************************************************')



###


##
    st.markdown('## Observations par centre')
    #Tester les 2
    #CENTRE = Df_regions['centre_id']
    CENTRE = Df_dep_total['centre_id']
    Df_dep_total.set_index('centre_id', inplace=True)
    Df_dep_total['centre_id'] = Df_dep_total.index

    # Create a multiselection bar
    ID_Centre = st.sidebar.multiselect('Entrer l\'identifiant du centre, centre_id:', CENTRE.unique())

    #Df_regions.reset_index(inplace=True)
    #Df_dep = Df_regions[Df_regions.code_departement==ID_Dep]

    Df_centres = Df_dep_total.loc[ID_Centre] #Df_regions[Df_regions['centre_id'].isin(ID_Centre)]
    #Df_centres = Df_dep_total[Df_dep_total.centre_id==ID_Centre]  #Df_dep_total.loc[ID_Centre]

    #def update_dfcentre(ID_Centre):
    #    if type(ID_Centre)!=str:
    #        Df_centres = Df_dep_total[Df_dep_total['centre_id'].isin(ID_Centre)]
    #    else:
    #        Df_centres = Df_dep_total[Df_dep_total['centre_id']==ID_Centre]
    
    #Df_centres = update_dfcentre(ID_Centre)
    #Df_centres = Df_dep_total[Df_dep_total['centre_id'].isin(ID_Centre)]


    st.markdown('### *Score de priorité*')
    #score_de_priorite = Df_centres['score_de_priorite']
    #st.write('Score de priorité = ', score_de_priorite)
    st.write('******************************************************')


    # Observe allocations evolution
    st.markdown('### *Observation de l\'évolution des allocations par semaine*')

    #st.title('Nombres de flacons alloués par semaine')
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    semaines = Df_centres['semaine'] # à voir
    nombre_ucd = Df_centres['nb_ucd'] # dans df initial allocations
    ax.plot(semaines, nombre_ucd) 
    ax.set_xlabel('Semaines')
    ax.set_ylabel('Nombre d\'udc')
    #st.write(fig)
    st.pyplot(bbox_inches='tight')
    plt.clf()

    # Observe allocations evolution
    #st.title('Observation de l\'évolution des allocations par jour')


    st.write('******************************************************')

    # Observe stocks evolution
    st.markdown('### *Observation de l\'évolution des stocks par semaine*')

    #st.title('Nombres de flacons en stock par semaine')
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    semaines = Df_centres['semaine'] # à voir
    # We need the stock number from the centres
    #nombre_ucd = Df_centres['nb_ucd'] # dans df initial stock
    ax.plot(semaines, nombre_ucd) 
    ax.set_xlabel('Semaines')
    ax.set_ylabel('Nombre d\'udc')
    #st.pyplot(bbox_inches='tight')
    #plt.clf()
    st.write('Nous avons besoin des données de stock des centres')

    # Observe stocks evolution
    #st.title('Observation de l\'évolution des stocks par jour')


    st.write('******************************************************')

    # Observe allocations evolution
    st.markdown('### *Observation de l\'évolution des allocations et des stocks par semaine*')
    ### FAIRE UN GRAPH qui regroupe les 2 du haut

    # Observe allocations evolution
    st.markdown('### *Observation de l\'évolution des allocations et des stocks par jour*')


    st.write('******************************************************')

    # Observe missed appointment ratio evolution
    st.markdown('### *Observation de l\'évolution du ratio de RDV manqués/RDV prévus par semaine*')
    #st.title('Nombres de flacons en stock par semaine')
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    semaines = Df_centres['semaine'] # à voir
    ratio = Df_centres['ratio_efficacite'] # dans df merge tot
    ax.plot(semaines, ratio) 
    ax.set_xlabel('Semaines')
    ax.set_ylabel('Ratio RDV manqués/prévus')
    #st.write(fig)
    st.pyplot(bbox_inches='tight')
    plt.clf()
    st.write('******************************************************')

    # Observe missed appointment ratio evolution
    st.markdown('### *Observation de l\'évolution du ratio de RDV manqués/RDV prévus par jour*')
    st.write('******************************************************')
    st.write('******************************************************')

  

if __name__== '__main__':
    main()
